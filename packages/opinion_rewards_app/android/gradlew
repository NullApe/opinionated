#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass any JVM options to Gradle.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "ERROR: $*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH_SEPARATOR=:
if $cygwin || $msys; then
  CLASSPATH_SEPARATOR=";"
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done

APP_HOME=`dirname "$PRG"`

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --windows "$APP_HOME"`
fi

# Locate the Gradle wrapper properties file.
if [ -f "$APP_HOME/gradle/wrapper/gradle-wrapper.properties" ] ; then
    GRADLE_WRAPPER_PROPERTIES_FILE="$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
else
    die "Could not locate a Gradle wrapper properties file at '$APP_HOME/gradle/wrapper/gradle-wrapper.properties'."
fi

# Read the wrapper properties file.
eval `cat "$GRADLE_WRAPPER_PROPERTIES_FILE" | grep "^distributionUrl" | sed 's/\\/\\\\/g'`

# Check for a valid distributionUrl.
if [ -z "$distributionUrl" ] ; then
    die "The Gradle wrapper properties file at '$GRADLE_WRAPPER_PROPERTIES_FILE' is missing a 'distributionUrl' entry."
fi

# Check for a system-wide Gradle wrapper jar.
if [ -n "$GRADLE_WRAPPER_JAR" ] && [ -f "$GRADLE_WRAPPER_JAR" ] ; then
    echo "Using system-wide Gradle wrapper jar: '$GRADLE_WRAPPER_JAR'"
else
    # Determine the Gradle wrapper jar file.
    GRADLE_WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
fi

# Check for a system-wide Gradle distribution.
if [ -n "$GRADLE_USER_HOME" ] ; then
    echo "Using system-wide Gradle distribution defined by GRADLE_USER_HOME: '$GRADLE_USER_HOME'"
fi

# Check for a project-specific Gradle distribution.
if [ -z "$GRADLE_USER_HOME" ] && [ -f "$APP_HOME/.gradle-distribution" ] ; then
    GRADLE_USER_HOME=`cat "$APP_HOME/.gradle-distribution"`
    echo "Using project-specific Gradle distribution: '$GRADLE_USER_HOME'"
fi

# If GRADLE_USER_HOME is not set, use the default.
if [ -z "$GRADLE_USER_HOME" ] ; then
    GRADLE_USER_HOME="$HOME/.gradle"
fi

# Make sure the Gradle distribution directory exists.
if [ ! -d "$GRADLE_USER_HOME" ] ; then
    mkdir -p "$GRADLE_USER_HOME"
    if [ $? -ne 0 ] ; then
        die "Could not create Gradle distribution directory at '$GRADLE_USER_HOME'."
    fi
fi

# Download the Gradle distribution if it doesn't exist.
if [ ! -f "$GRADLE_WRAPPER_JAR" ] ; then
    echo "Downloading $distributionUrl"
    # Use wget or curl, whichever is available.
    if [ -x "`command -v wget`" ] ; then
        wget -O "$GRADLE_WRAPPER_JAR" "$distributionUrl"
    elif [ -x "`command -v curl`" ] ; then
        curl -L -o "$GRADLE_WRAPPER_JAR" "$distributionUrl"
    else
        die "Could not find 'wget' or 'curl' to download the Gradle distribution."
    fi
fi

# Set the Java executable.
if [ -n "$JAVA_HOME" ] ; then
    JAVACMD="$JAVA_HOME/bin/java"
else
    JAVACMD="java"
fi

# Verify that the Java executable exists.
if ! [ -x "$JAVACMD" ] ; then
    die "Could not find a Java executable. Please set JAVA_HOME."
fi

# Execute Gradle.
exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "-Dorg.gradle.appname=$APP_BASE_NAME" -classpath "$GRADLE_WRAPPER_JAR" org.gradle.wrapper.GradleWrapperMain "$@"
